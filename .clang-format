---
AccessModifierOffset: -4
AlignTrailingComments: true
AlignAfterOpenBracket: BlockIndent
AlignOperands: AlignAfterOperator
AllowAllParametersOfDeclarationOnNextLine: true
AllowAllArgumentsOnNextLine: true
AllowShortFunctionsOnASingleLine: false
AllowShortIfStatementsOnASingleLine: WithoutElse
AllowShortLoopsOnASingleLine: false
AllowShortLambdasOnASingleLine: Empty
AllowShortBlocksOnASingleLine: Empty
AlwaysBreakBeforeMultilineStrings: true
AlwaysBreakTemplateDeclarations: true
BasedOnStyle: LLVM
BinPackArguments: false
BinPackParameters: false
BreakBeforeBinaryOperators: NonAssignment
BreakBeforeBraces: Allman
BreakBeforeConceptDeclarations: Always
BreakConstructorInitializers: BeforeComma
BreakInheritanceList: BeforeComma
BreakAfterAttributes: Always
ColumnLimit: 80
ConstructorInitializerIndentWidth : 0
ContinuationIndentWidth: 4
Cpp11BracedListStyle: true
EmptyLineBeforeAccessModifier: LogicalBlock
ExperimentalAutoDetectBinPacking: false
IndentCaseLabels: false
IndentPPDirectives: AfterHash
IndentWidth: 4
KeepEmptyLinesAtTheStartOfBlocks: false
LambdaBodyIndentation: Signature
MaxEmptyLinesToKeep: 1
NamespaceIndentation: None
#PackConstructorInitializers: NextLineOnly
PenaltyBreakComment: 1
PenaltyBreakOpenParenthesis: 1
PenaltyBreakFirstLessLess: 1
PenaltyBreakString: 400
PenaltyExcessCharacter: 1
PenaltyReturnTypeOnItsOwnLine: 10
PenaltyIndentedWhitespace: 1
PointerAlignment: Left
QualifierAlignment: Custom
QualifierOrder: ['static', 'inline', 'const', 'type']
RequiresClausePosition: OwnLine
IndentRequiresClause: false
SeparateDefinitionBlocks: Always
ShortNamespaceLines: 0
SpaceAfterTemplateKeyword: true
SpaceBeforeAssignmentOperators: true
SpaceInEmptyParentheses: false
SpacesBeforeTrailingComments: 1
SpaceBeforeParens: Custom
SpaceBeforeParensOptions:
    AfterControlStatements: true
    AfterRequiresInClause: true
    AfterRequiresInExpression: true
SpacesInCStyleCastParentheses: false
SpacesInParentheses: false
Standard: c++20
UseTab: Never
IncludeBlocks: Regroup
IncludeCategories:
  - Regex:           '^<[a-z_]+>$'
    Priority:        1
  - Regex:           '^<[a-z_]+\.h>$'
    Priority:        2
  - Regex:           '^(<|")(boost|commonpp).*'
    Priority:        3
  - Regex:           '.*'
    Priority:        4
WhitespaceSensitiveMacros: ['BOOST_PP_STRINGIZE']
...
